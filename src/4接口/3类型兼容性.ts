// js如何判断两个类型是兼容的

// 如果是兼容,则可以完成赋值

// 不兼容就不会完成赋值

// B如果能完成赋值为A, 则B和A类型兼容


// 总的原则: 鸭子辨型法(子结构辨型法)
// 判断出来具备的其中一两个特征就可以判断了
// 目标类型需要某一些特征,赋值的类型只要能满足该特征即可,不用去考虑别的东西



// 1.基本类型的判定:完全匹配

// 2.对象类型的判定: 鸭子辨型法
interface Duck {
    sound: "嘎嘎嘎"
    swin(): void
}

let person = {
    name: "伪装成鸭子的人",
    age: 11,
    swin() {
        console.log("11")
    },
    // 我想要让我这个sound被判断为字面量类型,
    // 就得用类型断言
    // 前面是数据,as后面是类型,这个类型是字面量类型"嘎嘎嘎"
    sound: "嘎嘎嘎" as "嘎嘎嘎"
}

// 我定义一个变量,让他是Duck的类型
// 但是我的这个person变量是可以赋值给duck的
// 就是只要有鸭子的结构满足就好了
let duck: Duck = person

// 但是,要是直接用{ ... }这种对象字面量进行赋值的时候,会进行更加严格的判断,所以直接把person后面的对象直接赋值就会报错

// 所以我们在定义接口的时候没必要把所有的东西都定义了
// 只要定义一部分就可以了


// 3.函数类型: 一切无比的自然

// 参数: 传递给目标函数的参数,可以少,但不可以多
// 举个例子, forEach的参数可以传一个,可以传两个,可以传三个,但不能传四个

// 返回值: 如果要求返回,那么返回结果要严格匹配,如果不要求返回,那么随意,可以返回个东西


